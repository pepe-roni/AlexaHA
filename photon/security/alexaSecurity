int pirState = LOW;    
int detected = 0;
int pirVal = 0;    

int previousDoor=0;
int doorStatus = 0;
 
int sensorState = 0;
int lastState = 0;
int broken =0;

Servo servoFS; 
 
void setup() 
{
  pinMode(0, INPUT);
  pinMode(2, INPUT);
  digitalWrite(2,HIGH);
  Particle.variable("pir", detected);
  
  Particle.variable("doorStatus", doorStatus);
  Particle.variable("preDoor", previousDoor);
  
  Particle.function("getWater", getWaterHandler);
  
  Particle.function("servoHandle", servoHandler);
  Particle.function("servoHandlec", servoCloseHandler);
  
  Particle.variable("lb", broken);
  
  Particle.function("getDoor", getDoor);
  
  servoFS.attach(0);
  
}

//servos
int servoHandler(String args)
{
    servoFS.write(0);
    delay(7000);
    servoFS.write(90);
    return 1;
}

int servoCloseHandler(String args)
{
    servoFS.write(180);
    delay(7000);
    servoFS.write(90);
    return 1;
}

//soil moisture
int getWaterHandler(String args)
{
    int soilM = analogRead(3);
    String callback = args;
    if(callback == "error" || strlen(callback)>10)
    {
        return -1;
    }
    else
    return soilM;
}


//beam break

void lb()
{
   int rawRead = analogRead(0);
   if(rawRead>1)
   {
       broken = 0;
       delay(5000);
   }
   else
   {
       broken = 1; 
       Particle.publish("lb", "broken");    
   }
}

void loop()
{
  pir();
  door();
  lb();
}
 
 
/*pir motion sensor
string hold is there to keep the console log limited to one change in motion, as it only polls/logs 1 once.
dectected is raw detection from the sensor, at max refresh rate the sensor puts out 10 polls/ detection.
pirVal is the raw input and pulse from the sensor
*/
void pir()
{
  String hold;
  pirVal = digitalRead(0);  
  if (pirVal == HIGH) 
  {         
    if (pirState == LOW) 
    {
      detected = 1; 
      pirState = HIGH;
      hold = hold+"i";
      Particle.publish("detected", PRIVATE);
      
    }
  } 
  else 
  {
    if (pirState == HIGH)
    {
        detected = 0;
        pirState = LOW;
        hold = "";
    }
  }
}  
  
// door
  //doorStatus = analogRead(1);
  // when the door is closed, sensor returns low value, open returns insanely high values
  // stop overload of 1's
  //status = 1 open
  //status = 0 closed
  //status = 2 open but no return to ifttt
  
void door()
{
  if(analogRead(1) > 5)
  {
      if(previousDoor>0)
      {
          delay(6000);
          doorStatus = 2;
      }
      else
      {
        doorStatus = 1;
        previousDoor = 1;
        Particle.publish("doorStatus","open");
        
      }
  }
  else 
  {
    doorStatus = 0; 
    previousDoor = 0;
  }
}

int getDoor(String args)
{
    return doorStatus;
}
 